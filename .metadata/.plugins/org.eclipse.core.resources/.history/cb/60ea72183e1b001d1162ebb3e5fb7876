package com.pietrobraga.backend.services;

import java.util.List;
import java.util.stream.Collectors;

import javax.persistence.EntityNotFoundException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.pietrobraga.backend.dto.CategoryDTO;
import com.pietrobraga.backend.entities.Category;
import com.pietrobraga.backend.repositories.CategoryRepository;
import com.pietrobraga.backend.services.exceptions.DatabaseException;
import com.pietrobraga.backend.services.exceptions.ResourceNotFoundException;

@Service
public class CategoryService {

	@Autowired
	private CategoryRepository repository;
	
	@Transactional(readOnly = true)
	public List<CategoryDTO> findAll(){
		List<Category> categories = repository.findAll();
		List<CategoryDTO> categoriesDto = categories.stream().map(x -> new CategoryDTO(x)).collect(Collectors.toList());
		return categoriesDto;
	}
	
	@Transactional(readOnly = true)
	public CategoryDTO findById(Long id){
		Category category = repository.findById(id).orElseThrow(() -> new ResourceNotFoundException("Entity not found"));
		CategoryDTO categoryDto = new CategoryDTO(category);
		return categoryDto;
	}
	
	@Transactional
	public CategoryDTO insert(CategoryDTO dto) {
		Category entity = new Category();
		entity.setName(dto.getName());
		repository.save(entity);
		return new CategoryDTO(entity);
	}
	
	@Transactional
	public CategoryDTO update(Long id, CategoryDTO dto) {
		try {
			Category entity = repository.getOne(id);
			entity.setName(dto.getName());
			repository.save(entity);
			return new CategoryDTO(entity);
		}catch(EntityNotFoundException e) {
			throw new ResourceNotFoundException("Id not found " + id);
		}
	}
	
	public void delete(Long id) {
		try {
			repository.deleteById(id);
		}catch(EmptyResultDataAccessException e) {
			throw new ResourceNotFoundException("Id not found "+id);
		}
		catch(DataIntegrityViolationException e) {
			throw new DatabaseException("Integrity violation");
		}
	
	}

	public Page<CategoryDTO> findAllPaged(PageRequest pageRequest) {
		Page<Category> categories = repository.findAll(pageRequest);
		return categories.map(x -> new CategoryDTO(x));
	}
	
}
